- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.dnf: # Homogenous, only works for Redhat family
    name: "{{item}}"
    state: installed
  loop:
  - nodejs
  - mysql

- name: create expense user
  ansible.builtin.user: # Hetrogenous, Works for all Distributions (Ex: .package)
    name: expense
    
#Instead of 4 modules: delete existing directory, create new directory, download code, extract code
# Use below 1 module 
- name: run app pre-requisites
  tags:
  - deployment
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

# - name: create app directory
#   ansible.builtin.file:
#     path: /app
#     state: directory
  
# - name: download backend code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzip backend code
#   ansible.builtin.unarchive:  #Unziping
#     src: /tmp/backend.zip #src:  by default checks file in ansible server (We get error), and unZip in remote machine
#     dest: /app
#     remote_src: yes #Saying: Un-Archive a file that is already in the remote machine

# - name: install npm dependencies # Now no need this already in Nexus Artifact
#   tags:
#   - deployment
#   ansible.builtin.command: npm install #--> Should be installed where package.json is located (backend -> /app/)
#   args:
#     chdir: /app #Before npm install go to this dir and install

- name: copy backend service
  ansible.builtin.template: # From templates folder (backend.service) from Ansible server  --> to Remote Machine/server
    src: backend.service.j2 #jinja2
    dest: /etc/systemd/system/backend.service

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Enable backend service
  ansible.builtin.service:
    name: backend
    enabled: yes

- name: install python mysql dependencies
  ansible.builtin.pip: 
    name:
    - PyMySQL # To connect MySQL DB from Ansible
    - cryptography # Purpose_For: Authentication, Data Encryption, Key Management, Secure Communication, 
    executable: pip3.9 # pip3.11 if python version is 3.11

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{login_user}}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql # Importing in this location
    state: import # or dump (Not recommended)
    name: all # To import/dump all the data

# Below code in Handler Folder
# - name: deamon reload
#   ansible.builtin.systemd_service:
#     daemon_reload: true

- name: start and enable backend service
  tags:
  - deployment
  ansible.builtin.service:
    name: backend
    state: restarted #started (Before)
